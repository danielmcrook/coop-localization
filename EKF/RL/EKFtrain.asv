function [Observation,Reward,IsDone,LoggedSignals] = EKFtrain(Action,LoggedSignals)

% rng(100)
% load('QRLnew.mat','Q')
% Action = [ones(1,6), zeros(1,15), ones(1,6)];
Qkf = diag(Action(1:6));
% Q = diag([0.05 0.0005 0.01 .1 .1 0.003]);
% Q = diag([0.05 0.05 0.1 50 50 0.03]);
% Q(1,2) = Action(7);  Q(2,1) = Q(1,2);
% Q(1,3) = Action(8);  Q(3,1) = Q(1,3);
% Q(1,4) = Action(9);  Q(4,1) = Q(1,4);
% Q(1,5) = Action(10);  Q(5,1) = Q(1,5);
% Q(1,6) = Action(11);  Q(6,1) = Q(1,6);
% 
% Q(2,3) = Action(12);  Q(3,2) = Q(2,3);
% Q(2,4) = Action(13);  Q(4,2) = Q(2,4);
% Q(2,5) = Action(14);  Q(5,2) = Q(2,5);
% Q(2,6) = Action(15);  Q(6,2) = Q(2,6);
% 
% Q(3,4) = Action(16);  Q(4,3) = Q(3,4);
% Q(3,5) = Action(17);  Q(5,3) = Q(3,5);
% Q(3,6) = Action(18);  Q(6,3) = Q(3,6);
% 
% Q(4,5) = Action(19);  Q(5,4) = Q(4,5);
% Q(4,6) = Action(20);  Q(6,4) = Q(4,6);
% 
% Q(5,6) = Action(21);  Q(6,5) = Q(5,6);

% thresh = (abs(Q)>0.8) - diag(diag((abs(Q)>0.8)));
% Q = Q.*~thresh;

[~,P] = cholcov(Qkf);

if P > 0
%     NN = 0;
    IsDone = 1;
    Reward = -Inf;
    Observation = -100000000000*ones(1,7000);
else
    %% Globals/Givens
%     load('RLdata.mat','R','Q')
    % t = 0:0.1:100;
    % R = diag([0.0225 64 0.04 36 36]);
    p = 6; n = 1001; I = eye(p); rng(100)
    Q = diag([0.001 0.001 0.01 0.001 0.001 0.01]);
    R = diag([0.0225 64 0.04 36 36]);
    
    %% NL Matrices
    A = @(vg,thetag,va,thetaa) [0 0 -vg*sin(thetag) 0 0 0;...
        0 0 vg*cos(thetag) 0 0 0;...
        0 0 0 0 0 0;...
        0 0 0 0 0 -va*sin(thetaa);...
        0 0 0 0 0 va*cos(thetaa);...
        0 0 0 0 0 0];

    C = @(xig,etag,xia,etaa) [((etaa-etag)/(xia-xig)^2)/(1+((etaa-etag)/(xia-xig))^2)...
        -(1/(xia-xig))/(1+((etaa-etag)/(xia-xig))^2) -1 ...
        -((etaa-etag)/(xia-xig)^2)/(1+((etaa-etag)/(xia-xig))^2)...
        (1/(xia-xig))/(1+((etaa-etag)/(xia-xig))^2) 0;...
        (xig-xia)/sqrt((xig-xia)^2+(etag-etaa)^2)...
        (etag-etaa)/sqrt((xig-xia)^2+(etag-etaa)^2) 0 ...
        -(xig-xia)/sqrt((xig-xia)^2+(etag-etaa)^2)...
        (etag-etaa)/sqrt((xig-xia)^2+(etag-etaa)^2) 0;...
        -((etag-etaa)/(xig-xia)^2)/(1+((etag-etaa)/(xig-xia))^2)...
        (1/(xig-xia))/(1+((etag-etaa)/(xig-xia))^2) 0 ...
        ((etag-etaa)/(xig-xia)^2)/(1+((etag-etaa)/(xig-xia))^2)...
        -(1/(xig-xia))/(1+((etag-etaa)/(xig-xia))^2) -1;...
        0 0 0 1 0 0; 0 0 0 0 1 0];
    %% Nominal Traj. & Linearization
    % given initial state
    xig = 10;
    etag = 0;
    thetag = pi/2;
    xia = -60;
    etaa = 0;
    thetaa = -pi/2;

    % given controls
    vg = 2;
    phig = -pi/18;
    va = 12;
    wa = pi/25;
    %% Discretization
    DT = 0.1;

    Fpred = @(vg,thetag,va,thetaa) I + DT*A(vg,thetag,va,thetaa);
    Hpred = @(xig,etag,xia,etaa) C(xig,etag,xia,etaa);

    x0 = [xig etag thetag xia etaa thetaa]';
    u = [vg phig va wa]';
    %% Monte Carlo/Filter
    NN = 25;
    P0 = diag([3 3 0.1 10 10 0.1]);
%     P0 = diag([2.5 2.5 0.25 5 5 0.25]);
    % P0 = diag(Action(22:27));
    nees = zeros(1,n-1);
    nis  = zeros(1,n-1);
    EXKrec = zeros(p,n-1);
    pk = zeros(p,n-1);
    ydata = zeros(p-1,n);
    epyk = zeros(1,n-1);
    
    for test=1:NN
        
        xtrue = zeros(p,n);
        xtrue(:,1) = mvnrnd(x0,P0);
        
        for k=2:n
%             W = mvnrnd(zeros(6,1),Q)';
            xtrue(:,k) = correct(NLdyn(xtrue(:,k-1),u,mvnrnd(zeros(6,1),Q)'))';

%             V = mvnrnd(zeros(5,1),R)';
            ydata(:,k) = NLmeas(xtrue(:,k)) + mvnrnd(zeros(5,1),R)';
            ydata(1,k) = wrapToPi(ydata(1,k)); ydata(3,k) = wrapToPi(ydata(3,k));
        end
        
        xk = zeros(p,n);
        xk(:,1) = x0;
        Ppkm1 = P0;
        
        for k=2:n
            % Lookup full state to linearize about
    %         xig = xk(1,k-1); etag = xk(2,k-1);
            thetag = xk(3,k-1);
    %         xia = xk(4,k-1); etaa = xk(5,k-1);
            thetaa = xk(6,k-1);

            % Jacobian estimate
            Fkm1 = Fpred(vg,thetag,va,thetaa);

            % Estimation-Error Covariance
            Pmk = Fkm1*Ppkm1*Fkm1' + Qkf;

            % State Estimate
            xmk = correct(NLdyn(xk(:,k-1),u,zeros(6,1)));
            % record NL state estimate

            % Jacobian estimate
            Hk = Hpred(xmk(1),xmk(2),xmk(4),xmk(5));

            % Kalman Gain
            Kk  = Pmk*Hk' / (Hk*Pmk*Hk' + R);

            % Nonlinear Measurement Innovation
            ymkp1 = NLmeas(xmk);
            ymkp1(1) = wrapToPi(ymkp1(1)); ymkp1(3) = wrapToPi(ymkp1(3));

            eyk = [-angdiff(ydata(1,k),ymkp1(1)); ...
                ydata(2,k)-ymkp1(2); ...
                -angdiff(ydata(3,k),ymkp1(3)); ...
                ydata(4:5,k)-ymkp1(4:5)];
    %         eykrec(:,k-1) = eyk;

            % NIS
            epyk(k-1) = NIS(eyk,Hk,Pmk,R);
            nis( = nis+epyk;

            % Update State Estimate
            xk(:,k) = correct(xmk + Kk*eyk);

            % Update Estimation-Error Covariance
            Ppkm1 = (I - Kk*Hk)*Pmk;
            pk(:,k-1) = pk(:,k-1) + 2*sqrt(diag(Ppkm1));
            
            % NEES
            diff = [xtrue(1:2,k)-xk(1:2,k); wrapToPi(xtrue(3,k)-xk(3,k)); ...
                xtrue(4:5,k)-xk(4:5,k); wrapToPi(xtrue(6,k)-xk(6,k))];
            nees(k-1) = nees(k-1) + NEES(diff,Ppkm1);
            EXKrec(:,k-1) = EXKrec(:,k-1) + diff;
    %         Ppkm1 = Ppk;
        end
    end
    
    pk = pk/NN;
    % EYKrec = EYKrec/NN;
    EXKrec = EXKrec/NN;
    % xkrecord = xkrecord/NN;
    % pkrecord = pkrecord/NN;
    % skrecord = skrecord/NN;
    % NLdynrecord = NLdynrecord/NN;
    % nis = nis/NN;
    nees = nees/NN;
    
    
    out = ((-pk-EXKrec)>=0).*(-pk-EXKrec) + ((EXKrec-pk)>=0).*(EXKrec-pk);
    
    Observation = [out(:)' nees];
%     Observation = [EXKrec; nees];

    %% NEES
    alpha = 0.05;
    r1 = chi2inv(alpha/2,NN*6)/NN;
    r2 = chi2inv(1- alpha/2,NN*6)/NN;
    
    b1 = nees>r1;
    b2 = nees>r2;
    
    B1 = ~b1.*~b2;
    B2 = b1.*b2;
    
    B3 = b1.*~b2;
    
    if 1-sum(B3)/n < alpha
        Reward = 10000;
    else
        Reward = sum(B3) + sum((r2 - nees).*B2 + (nees - r1).*B1);
    end
    
    % Reward = r2 - nees.*B;
    % Reward = Reward + nees.*~B - r1^2;
    
    %% NIS
    
    r1 = chi2inv(alpha/2,NN*5)/NN;
    r2 = chi2inv(1- alpha/2,NN*5)/NN;
    
    
    
    
    
    
    IsDone = 1;
%     disp(Action)
    fprintf('Reward: %.f Q: ',Reward)
    disp(diag(Qkf)')
    
    
    
    load('Qs.mat','record')
    record{record{end,1}+1,1} = record{end,1}+1;
    record{record{end,1},2} = Qkf;
    record{record{end,1},3} = Reward;
%     scatter(record{end,1},Reward)
    save('Qs.mat','record')
end
% disp(Observation(:,1:10))
% save('Obs.mat','Observation')
end